import warnings                                  # `do not disturbe` mode
warnings.filterwarnings('ignore')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from plotly.subplots import make_subplots
import plotly.graph_objects as go
import plotly.express as px


df = pd.read_csv('FAOSTAT_downloaded20210119.csv')
foods = pd.read_csv('foods.csv')


#Bind old (-2013) and new time series (2014-): Food Balances and Producer prices
df.Domain.replace('Food Balances (old methodology and population)', 'FoodBalances', inplace=True)
df.Domain.replace('New Food Balances', 'FoodBalances', inplace=True)
df.Domain.replace('Producer Prices', 'ProducerPrices', inplace=True)
df.Domain.replace('Producer Prices (old series)', 'ProducerPrices', inplace=True)
df.Domain.replace('Food Supply - Crops Primary Equivalent', 'FoodSupply', inplace=True)
df.Domain.replace('Crops', 'CropProduction', inplace=True)
df.Domain.replace('Value of Agricultural Production', 'ValueAgProduction', inplace=True)

#merge with dictionary including "Food groups". Category 2 based on HDDS.
#if you want to filter out non-food, processed foods and beverages, select 'Crop' and 'CropProducts'
df = df.merge(foods, how='left', on='Item')

df1 = df[(df.Domain == 'FoodBalances') & 
         ((df.Category1 == 'Crop')|(df.Category1 == 'CropProducts')) &
         (df.Year >= 1991) & (df.Year <= 2019)]
df1 = df1[['Domain', 'Area', 'Year', 'Element', 'Value', 'name']]
df1 = df1.rename(columns={'name' : 'Item'})

a = df1[(df1.Element == 'Production') ].groupby(['Item', 'Area']).mean().reset_index()
a = a.rename(columns={'Value':'Production'})
b = df1[ (df1.Element == 'Food')].groupby(['Item', 'Area']).mean().reset_index()
b = b.rename(columns={'Value':'Food'})
d = df1[(df1.Element == 'Import Quantity')].groupby(['Item', 'Area']).mean().reset_index()
d = d.rename(columns={'Value':'Import'})
e = df1[(df1.Element == 'Export Quantity')].groupby(['Item', 'Area']).mean().reset_index()
e = e.rename(columns={'Value':'Export'})
f = df1[(df1.Element == 'Domestic supply quantity')].groupby(['Item', 'Area']).mean().reset_index()
f = f.rename(columns={'Value':'DomesticSupply'})
g = df1[(df1.Element == 'Food supply quantity (kg/capita/yr)')].groupby(['Item', 'Area']).mean().reset_index()
g = g.rename(columns={'Value':'FoodPerCapita'})

df3 = df[(df.Domain == 'ProducerPrices') & 
         ((df.Category1 == 'Crop')|(df.Category1 == 'CropProducts')) &
         (df.Year >= 1991) & (df.Year <= 2019)] 
df3 = df3[['Domain', 'Area', 'Year', 'Element', 'Value', 'name']]
df3 = df3.rename(columns={'name' : 'Item'})
h = df3[(df3.Element == 'Producer Price Index (2014-2016 = 100)') ].groupby(['Item', 'Area']).mean().reset_index()
h = h.rename(columns = {'Value':'PriceIndex'})

df4 = df[(df.Domain == 'ValueAgProduction') & 
         ((df.Category1 == 'Crop')|(df.Category1 == 'CropProducts')) &
         (df.Year >= 1991) & (df.Year <= 2019)] 
df4 = df4[['Domain', 'Area', 'Year', 'Element', 'Value', 'name']]
df4 = df4.rename(columns={'name' : 'Item'})
i = df4[(df4.Element == 'Gross Production Value (constant 2014-2016 million US$)') ].groupby(['Item', 'Area']).mean().reset_index()
i = i.rename(columns = {'Value':'GrossProductionValue'})

df2 = a.merge(b, how='outer', on=['Item', 'Area', 'Year'])
df2 = df2.merge(g, how= 'outer', on=['Item', 'Area', 'Year'])
df2 = df2.merge(h, how= 'outer', on=['Item', 'Area', 'Year'])
df2 = df2.merge(i, how= 'outer', on=['Item', 'Area', 'Year'])

df2['FoodSelfSufficiency'] = df2.Production / df2.Food  *100
df2['FoodSelfSufficiency'] = df2['FoodSelfSufficiency'].round(1)
df2['FoodPerCapita'] = df2['FoodPerCapita'].round(1)
df2['PriceIndex'] = df2['PriceIndex'].round(1)
df2['GrossProductionValue'] = df2['GrossProductionValue'].round(1)
df2['Production'] = df2['Production'].round(1)
df2['Food'] = df2['Food'].round(1)

df2





def seeValuesPotentialCompetitor (variable, country, number):
    if country == 'LVB':
        agg = df2.groupby('Item').mean()
        a = agg.sort_values(variable, ascending=False).head(number)
    else:
        a = df2[df2['Area'] == country].sort_values(variable, ascending=False).head(number)
    a.reset_index(inplace=True)
    a.index += 1
    a.rename(columns={'Item':'TopCrops'}, inplace=True)
    a.drop('Year', axis=1, inplace=True)
    return a




def identifyPotentialCompetitor (variable, country, number):
    if country == 'LVB':
        agg = df2.groupby('Item').mean()
        agg.reset_index(inplace=True)
        topCrops = list(agg[['Item',variable]].sort_values(variable, ascending=False)['Item'].unique()[0:number])
    else:
        topCrops = list(df2[df2.Area == country][['Item', variable]].sort_values(variable, ascending=False)['Item'].unique()[0:number])
    return pd.DataFrame(topCrops, columns=['Top Crops'], index=range(1,number+1))
        

    

def graphCompetitors (variable, number):
    datos = df.copy()
    datos.Element.replace('Food supply quantity (kg/capita/yr)', 'FoodPerCapita', inplace=True)
    datos.Element.replace('Producer Price Index (2014-2016 = 100)', 'PriceIndex', inplace=True)
    datos.Element.replace('Gross Production Value (constant 2014-2016 million US$)','GrossProductionValue', inplace=True)
    datos = datos[(datos.Element == 'Food') & 
              ((datos.Category1 == 'Crop')|(datos.Category1 == 'CropProducts'))]
    datos = datos[['Domain', 'Area', 'Year', 'Element', 'Value', 'name', 'Unit']]
    datos = datos.rename(columns={'name' : 'Top Crops'})

    LVB = datos.groupby(['Domain', 'Year', 'Element', 'Top Crops', 'Unit']).mean()
    LVB['Area'] = 'LVB'
    LVB.reset_index(inplace=True)

    datos = datos.append(LVB[['Domain', 'Area', 'Year', 'Element', 'Value', 'Top Crops', 'Unit']])
        
    topCrops = identifyPotentialCompetitor(variable, 'LVB', number)
    datos = datos.merge(topCrops, how='inner', on='Top Crops')
    
    fig = px.line(datos,
                  x='Year', 
                  y = 'Value',
                  color='Top Crops', 
                  facet_col='Area',
                  facet_col_wrap=2,
                  title=variable, 
                  labels = {'Value': datos.Unit[1]})

    fig.show()
